# Define the root logger with appender X  
#log4j.rootLogger = DEBUG, X  
#  
## Put the appender named X to be a File appender  
#log4j.appender.X=org.apache.log4j.FileAppender  
#log4j.appender.X.File=${log}/log.out  
#  
## Define the layout for X appender  
#log4j.appender.X.layout=org.apache.log4j.PatternLayout  
#log4j.appender.X.layout.conversionPattern=%m%n  

# ------- Example
# Define the root logger with appender file  
#log4j.rootLogger = DEBUG, FILE  
  
# Define the file appender  
#log4j.appender.FILE=org.apache.log4j.FileAppender  
#log4j.appender.FILE.File=${log}/log.out  
  
# Define the layout for file appender  
#log4j.appender.FILE.layout=org.apache.log4j.PatternLayout  
#log4j.appender.FILE.layout.conversionPattern=%m%n

#It is important to note that log4j supports UNIX-style variable substitution, such as ${variableName}.

# Root logger option  
# Root logger option  
log4j.rootLogger=DEBUG, file, stdout, gd
  
# Direct log messages to a log file  
log4j.appender.file=org.apache.log4j.RollingFileAppender
# The below folder logs will be created automaticlly  
log4j.appender.file.File=./logs/logging.log    
log4j.appender.file.MaxFileSize=10MB  
log4j.appender.file.MaxBackupIndex=10  
log4j.appender.file.layout=org.apache.log4j.PatternLayout  
log4j.appender.file.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n  
   
# Direct log messages to stdout  
log4j.appender.stdout=org.apache.log4j.ConsoleAppender  
log4j.appender.stdout.Target=System.out  
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout  
log4j.appender.stdout.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} [%-5p] %c{10}:%L: %m%n
   

# Define the file appender  
log4j.appender.gd=org.apache.log4j.FileAppender  
log4j.appender.gd.File=./logs/htmlLayout.html  
  
# Define the layout for file appender  
log4j.appender.gd.layout=org.apache.log4j.HTMLLayout  
log4j.appender.gd.layout.Title=HTML Layout Example  
log4j.appender.gd.layout.LocationInfo=true   


#  ConversionPattern: https://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/PatternLayout.html
#  XML file: https://examples.javacodegeeks.com/enterprise-java/log4j/log4j-conversion-pattern-example/
#  https://www.javatpoint.com/log4j-xml
#  https://www.javatpoint.com/log4j-logging-levels
#  https://www.javatpoint.com/log4j-vs-slf4j

# We dont use java.util.logging - https://stackoverflow.com/questions/11359187/why-not-use-java-util-logging

# If I would be starting a new project today I'd use SLF4J for the logging. This is a simple API which sits in between your program and the logging library that you use. Your program will use the SLF4J API, which passes the calls to the actual logging library that you plug in. You can use different logging libraries with SLF4J (for example Log4J or java.util logging), and you can switch to a different logging library without changing anything to your own source code.
# There is a "native" implementation of the SLF4J API called Logback. Last year I was on a project in which we decided to switch from Log4J to Logback very late in the project, because Log4J locks logfiles and Logback does not (which means that on Windows, you can't delete a logfile while Log4J has it open; Logback doesn't have that problem).
# https://logback.qos.ch/
# https://www.codejava.net/coding/common-conversion-patterns-for-log4js-patternlayout
